<?php
/**
 * @file
 * Contains hook implementations and helper functions for GSB Box
 */
require_once dirname(__FILE__) . '/jwt-lib/JwtToken.php';
date_default_timezone_set("UTC"); 
/**
 * Implementation of hook_menu().
 */
function gsb_box_menu() {
    $items = array();
    $items['admin/config/gsb/box'] = array(
      'title' => 'GSB Box',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gsb_box_settings_form'),
      'access arguments' => array('administer box'),
      'file' => 'gsb_box.admin.inc',
    );
    $items['gsb-box-access-token'] = array(
        'title' => 'GSB Box Access Token',
        'description' => 'GSB Box Access Token',
        'page callback' => 'gsb_box_get_access_token',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-case-files-import-bydate'] = array(
        'title' => 'GSB BOX - Case Node Files Import By Date ',
        'description' => '',
        'page callback' => 'gsb_box_case_files_import_bydate',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box/gsb-box-get-box-doc/%node/%'] = array(
      'title' => 'Downloading document...',
      'description' => 'Downloading document...',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gsb_box_get_box_doc', 2, 3),
      'access callback' => TRUE,
    );
    $items['gsb-box-case-alfresco-node-update'] = array(
        'title' => 'GSB BOX - Case Node Update',
        'description' => '',
        'page callback' => 'gsb_box_case_alresco_node_update',
        'access arguments' => array('administer box'),
    );
     $items['gsb-box-case-node-update-batch-one'] = array(
        'title' => 'GSB BOX - Case Node Update',
        'description' => '',
        'page callback' => 'gsb_box_case_node_update_one',
        'access arguments' => array('administer box'),
    );
      $items['gsb-box-case-node-update-batch-two'] = array(
        'title' => 'GSB BOX - Case Node Update',
        'description' => '',
        'page callback' => 'gsb_box_case_node_update_three',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-case-node-update-batch-final'] = array(
        'title' => 'GSB BOX - Case Node Update',
        'description' => '',
        'page callback' => 'gsb_box_case_node_update_two',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-case-wp-node-update'] = array(
        'title' => 'GSB BOX - Working Paper Node Update ',
        'description' => '',
        'page callback' => 'gsb_box_case_working_paper_node_update',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-case-node-update-box-id'] = array(
        'title' => 'GSB BOX - Case Node Update Box File ID',
        'description' => '',
        'page callback' => 'gsb_box_case_node_update_box_id',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-case-node-with-no-box-ids'] = array(
        'title' => 'GSB BOX - Case Node Update Box File ID',
        'description' => '',
        'page callback' => 'gsb_box_case_node_no_box_file_ids',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-wp-node-update-final'] = array(
        'title' => 'GSB BOX - WP Node Update with Box File ID',
        'description' => '',
        'page callback' => 'gsb_box_working_paper_node_update_final',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-wp-node-with-no-box-ids'] = array(
        'title' => 'GSB BOX - WP Node without Box File ID',
        'description' => '',
        'page callback' => 'gsb_box_wp_node_no_box_file_ids',
        'access arguments' => array('administer box'),
    );
    $items['gsb-box-fetch-wp'] = array(
        'title' => 'GSB BOX - WP Node without Box File ID',
        'description' => '',
        'page callback' => 'gsb_box_fetch_working_paper_files',
        'access arguments' => array('administer box'),
    );
    return $items;
}

/**
 * Implements hook_permission().
 */
function gsb_box_permission() {
  return array(
    'administer box' => array(
      'title' => t('Administer box'),
    ),
  );
}
/**
 * Implements hook_cron().
 */
function gsb_box_cron() {
  gsb_box_case_files_import_bydate();
}


/**
 *  Generating access token for Box API.
 */
function gsb_box_get_access_token() {
   
    /*$module_path = drupal_get_path('module', 'gsb_box');
    $key_file    = "private_key.txt"; 
    $file_path   = $module_path."/".$key_file;
    $private_key = file_get_contents($file_path, FILE_USE_INCLUDE_PATH);*/
    $private_key = variable_get("gsb_box_private_key", "");
    $data = array('client_id'   => trim(variable_get('box_client_id')),
               'client_secret'   => trim(variable_get('box_client_secret')),
               'user_id'         => trim(variable_get('box_user_id')),
               'enter_prise_id'  => trim(variable_get('box_enterprise_id')),
               'box_sub_type'    => trim(variable_get('box_sub_type')),
               'key_id'          => trim(variable_get('box_key_id')),
               'api_token_url'   => trim(variable_get('box_api_token_url')),
               'passphrase'      => trim(variable_get('box_passphrase')),
               'private_key'    =>  $private_key,
               'access_token_url'=> trim(variable_get('box_access_token_url')),
               'grant_type'      => trim(variable_get('box_grant_type')),
            );
 
      $jwtobj = new \JwtToken\JwtToken($data);
      $resp   = $jwtobj ->create_jwt_token();
      $resp   = json_decode($resp);
      if(isset($resp) && !empty($resp) && $resp->response == 'Success') {
            $send_data = array(
                        'grant_type'    => $data['grant_type'],
                        'client_id'     => $data['client_id'],
                        'client_secret' => $data['client_secret'],
                        'assertion'     => $resp->jwt
                        );
            $options = array(
                      'method'  => 'POST',
                      'data'    => http_build_query( $send_data, '', '&'),
                      'headers' => array('Content-Type' => 'application/x-www-form-urlencoded'),
                        );
            $response = drupal_http_request($data['access_token_url'], $options);
            $res_data = drupal_json_decode($response->data);
            if (empty($response->error)) {
                return $res_data['access_token'];
            }
            else {
              return "Error JWT Token";
            }
      }
      else {
           return "Error JWT Token";
      }
}


/**
 * Fetching all case files with product type, Case. Create/update nodes in GSB website
 */
function gsb_box_case_files_import_bydate($params = array()) {

  $token = gsb_box_get_access_token();
  if ($token != "Error JWT Token") {
       $options = array(
                        'method' => 'GET',
                        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                        'Authorization' => 'Bearer '.$token),
                        );
    
       $box_case_folder_id =   trim(variable_get('box_case_folder_id')); 
       $qry_data = array(
              'mdfilters'=> '[{"templateKey":"gsbitops","scope":"enterprise_86433","filters":{"productType": "case","publish":"Yes"}}]',
              'type'=>'file',
              'file_extensions'  => 'pdf',
              'fields' => 'name,modified_at,created_at',
              'ancestor_folder_ids'=>$box_case_folder_id,
              //'updated_at_range' => $date_range,
               );
        $qry_data['offset'] = 0;
        $qry_data['limit']  = 200;
        $qry = http_build_query($qry_data, '', '&');
        $response = drupal_http_request('https://api.box.com/2.0/search?'.$qry,$options);
        $folder_data = drupal_json_decode($response->data);
        echo "=========== Total Files for to create/update - ".$folder_data['total_count']."  ========";
        echo "<br/>";
        if(isset( $folder_data['entries']) && $folder_data['total_count'] > 0) {
            $count = 1;
            foreach($folder_data['entries'] as $row) {
              if($row['type'] == 'file') {
                  $res_meta_data = _gsb_box_fetch_file_meta_details($token,$row["id"]);
                  if(isset( $res_meta_data)) {
                    _gsb_box_case_node_import($res_meta_data,$row,$token);
                    $count ++;
                  }
               }
            }
        } 
        else {
          echo 'No files avilable for to create/update!';
          drupal_set_message('No files avilable for to create/update!');
        }
   }
   else
   {
      drupal_set_message('JWT Token has not generated!');
   }
  
}

/**
 * Function for fetching Box folder data
 */
function _gsb_box_get_folder_data($token, $limit, $offset) {

    $options = array(
                        'method' => 'GET',
                        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                        'Authorization' => 'Bearer '.$token),
                        );
    $box_case_folder_id =   trim(variable_get('box_case_folder_id'));
    $qry_data = array(
          'mdfilters'=> '[{"templateKey":"gsbitops","scope":"enterprise_86433","filters":{"productType": "case"}}]',
          'type'=>'file',
          'file_extensions'  => 'pdf',
          'content_types'=> 'name,file_content,entries',
          'fields' => 'name,modified_at,entries,metadata',
          'ancestor_folder_ids'=>$box_case_folder_id
           );
    $qry_data['offset'] = $offset;
    $qry_data['limit']  = $limit;
    $qry = http_build_query($qry_data, '', '&');
    $response = drupal_http_request('https://api.box.com/2.0/search?'.$qry,$options);
    $folder_data = drupal_json_decode($response->data);
    return $folder_data;

}


/**
 * Handles route for downloading Box Docs
 */
function gsb_box_get_box_doc($form, $form_state, $node, $authtype = '') {

  if ($node == null) {
    return;
  }

  $language = $node->language;
  switch ($authtype) {
    case 'simplesaml':
      if ($node->type == 'case' && !gsb_cmis_check_simplesaml_auth($node)) {
        return;
      }
      gsb_box_download_box_doc($node);
      break;
    case 'cas':
      if (user_is_logged_in()) {
        gsb_box_download_box_doc($node);
      }
      break;
    case 'free':
      if (gsb_cmis_isFreeCase($node)) {
        gsb_box_download_box_doc($node);
      }
      break;
    case 'notcase':
      if ($node->type != 'case') {
        gsb_box_download_box_doc($node);
      }
      break;
    case 'gsbauth':
      if (gsb_cmis_check_all_auths($node)) {
        gsb_box_download_box_doc($node);
      }
      break;
  }

  return $form;
}

/**
 * Streams doc from Box
 */
function gsb_box_download_box_doc($node) {
  
    if ($node == null) {
      return;
    }
    $language = $node->language;
    if($node->type == 'case')
    $file_id = $node->field_instance_text[$language][0]['value'];
    elseif($node->type == 'working_paper')
    $file_id = $node->field_document_uuid[$language][0]['value'];
    
    // get the box access token
    $token = gsb_box_get_access_token();
    if ($token != "Error JWT Token") {
       $options1 = array(
                      'method' => 'GET',
                      'headers' => array('Authorization' => 'Bearer '.$token),
                        );
       $content = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/content',$options1);
    }
    else {
      drupal_set_message('Error - Unable to find ' . $file_id . ' document: ' . '"' . $node->title . '"', 'error');
      return;
    }
    if (ob_get_level()) {
      ob_end_clean();
    }
    $filename = $node->field_document_name[$language][0]['value']; 
    $file_parts = pathinfo($filename);
    if (empty($file_parts['extension'])) {
      $filename = $node->field_item_id[$language][0]['value'].".pdf";
    }
    drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate');
    drupal_add_http_header('Content-type', 'application/pdf');
    drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $filename .'"');
    print($content->data);
    exit();
}

function _gsb_box_case_node_import($meta_data = array(), $main_data=array(),$token) {

    global $user;
    // Validating Product Types  'Case' Content type 
    $product_type = trim($meta_data['entries'][0]['productType']);
    if ($product_type != 'Case') {
      return;
    }

    // get the cwoAccess property, assume default of 'Not for distribution'
    $case_access = 'Not for distribution';
    if (!empty($meta_data['entries'][0]['caseStudyAccess1']) && trim($meta_data['entries'][0]['caseStudyAccess1']) != '') {
      $case_access = $meta_data['entries'][0]['caseStudyAccess1'];
    }

    $uuid = "";
    /*if (!empty($meta_data['entries'][0]['$id']) && trim( $meta_data['entries'][0]['$id']) != '') {
       $uuid = $meta_data['entries'][0]['$id'];
    }
    else{
      return;
    }*/

    $fileid = "";
    if (!empty($main_data['id']) && trim( $main_data['id']) != '') {
       $fileid = $main_data['id'];
    }
    else {
      return;
    }
    // Attempt to find a node with the document uuid
    /*$query = new EntityFieldQuery();
    $query->fieldCondition('field_document_uuid', 'value', $uuid, '=')->range(0, 1);
    $entities = $query->execute();*/

    // Attempt to find a node with the box file id
    $query = new EntityFieldQuery();
    $query->fieldCondition('field_instance_text', 'value', $fileid, '=')->range(0, 1);
    $entities = $query->execute();

    if (!empty($entities['node'])) {
      // a node already exists, so load it
      $nids = array_keys($entities['node']);
      $node = node_load(array_shift($nids));
    } else {
      // a node doesn't exist
      // we do not import(create) Cases that are marked as 'Not for distribution'
      if ($case_access == 'Not for distribution') {
        return;
      }

      // create a node
      $values = array(
        'type' => 'case',
        'uid' => $user->uid,
        'status' => 1,
        'comment' => 1,
        'promote' => 0,
      );
      $node = entity_create('node', $values);
    }

    // if the node isn't a Case, then bail
    if ($node->type != 'case') {
      return;
    }

    if ($case_access == 'Not for distribution') {
      // delete the node
      node_delete($node->nid);
      return;
    }

    $language = $node->language;

   
    $ewrapper = entity_metadata_wrapper('node', $node);

   //_gsb_box_log('writing document uuid', 'success');
   //$ewrapper->field_document_uuid->set($uuid);
   
    //Setting box file id
    $ewrapper->field_instance_text->set($fileid);
   
    //_gsb_box_log('writing title', 'success');
    if (!empty($meta_data['entries'][0]['title']) && trim($meta_data['entries'][0]['title']) != '') {
      $ewrapper->title->set($meta_data['entries'][0]['title']);
      //_gsb_box_log('title 0 = ' .$meta_data['entries'][0]['title'], 'success');
    } else {
      // if title is empty, then try to use document name
      if (!empty($meta_data['entries'][0]['itemId1']) && trim($meta_data['entries'][0]['itemId1']) != '') {
        $ewrapper->title->set($meta_data['entries'][0]['itemId1']);
        // _gsb_box_log('title 1 = ' . $meta_data['entries'][0]['itemId1'], 'success');
      } else {
        $ewrapper->title->set('no title');
      }
    }

    //_gsb_box_log('writing field_case_access', 'success');
    if (!empty($meta_data['entries'][0]['caseStudyAccess1']) && trim($meta_data['entries'][0]['caseStudyAccess1']) != '') {
      $ewrapper->field_case_access->set($meta_data['entries'][0]['caseStudyAccess1']);
    } else {
      $ewrapper->field_case_access->set('Not for distribution');
    }

    //_gsb_box_log('writing field_year_of_publication', 'success');
    if (!empty($meta_data['entries'][0]['publicationYear']) && trim($meta_data['entries'][0]['publicationYear']) != '') {
      $year = $meta_data['entries'][0]['publicationYear'];
     if (is_numeric($year)) {
        //_gsb_box_log('year = '.$year, 'success');
          $date = new DateTime($year."-02-02");
        //_gsb_box_log('year time stamp = '.$date->getTimestamp(),'success');
        $ewrapper->field_year_of_publication->set($date->getTimestamp());
      } else {
        $ewrapper->field_year_of_publication = NULL;
      }
    } else {
      $ewrapper->field_year_of_publication = NULL;
    }

    //_gsb_box_log('writing field_document_name', 'success');
    if (!empty($main_data['name']) && trim($main_data['name']) != '') {
      //_gsb_box_log('writing field_document_name = '.$main_data['name'], 'success');
      $ewrapper->field_document_name->set($main_data['name']);
    } else {
      $ewrapper->field_document_name->set(NULL);
    }

    //_gsb_box_log('writing field_description', 'success');
    if (!empty($meta_data['entries'][0]['abstract']) && trim($meta_data['entries'][0]['abstract']) != '') {
      $description = $meta_data['entries'][0]['abstract'];
      $description = str_replace('\n','<br/>',$description);
      $description = stripslashes($description);
      $ewrapper->field_description = array(
        'value' => $description,
        'format' => 'gsb_wysiwyg_text',
      );
    } else {
      $ewrapper->field_description = array(
        'value' => '',
        'format' => 'gsb_wysiwyg_text',
      );
    }

    //_gsb_box_log('writing field_link_document', 'success');
    $url = trim($main_data['shared_link']['download_url']);
    if (!empty($url)) {
      if (valid_url($url, TRUE)) {
        $url = _gsb_box_force_protocol($url);
        $ewrapper->field_link_document->url->set($url);
      } else {
        $ewrapper->field_link_document->set($url);
      }
    } else {
      $ewrapper->field_link_document->set(NULL);
    }

    //_gsb_box_log('writing field_author', 'success');
    if (!empty($meta_data['entries'][0]['author']) && trim($meta_data['entries'][0]['author']) != '') {
      $ewrapper->field_author->set($meta_data['entries'][0]['author']);
    } else {
      $ewrapper->field_author->set(NULL);
    }

    //_gsb_box_log('writing field_permissions_statement', 'success');
    if (!empty($meta_data['entries'][0]['permissionsStatement']) && trim($meta_data['entries'][0]['permissionsStatement']) != '') {
      $ewrapper->field_permissions_statement->set($meta_data['entries'][0]['permissionsStatement']);
    } else {
      $ewrapper->field_permissions_statement->set(NULL);
    }

    // _gsb_box_log('writing field_link_single', 'success');
    $url_harvard = $meta_data['entries'][0]['linkAtHarvard'];
    if (!empty($url_harvard)) {
      $url_harvard = _gsb_box_force_protocol($url_harvard);
      if (valid_url($url_harvard, TRUE)) {
        $ewrapper->field_link_single->url->set($url_harvard);
        $ewrapper->field_has_harvard_link->set("1");
      } else {
        $ewrapper->field_link_single->set(NULL);
        $ewrapper->field_has_harvard_link->set("0");
      }
    } else {
      $ewrapper->field_link_single->set(NULL);
      $ewrapper->field_has_harvard_link->set("0");
    }

   // _gsb_box_log('writing field_link_center_single', 'success');
   $url_casecenter = $meta_data['entries'][0]['theCaseCenterLink'];
    if (!empty($url_casecenter)) {
      $url_casecenter = _gsb_box_force_protocol($url_casecenter);
      if (valid_url($url_casecenter, TRUE)) {
        $ewrapper->field_link_center_single->url->set($url_casecenter);
        $ewrapper->field_has_case_center->set("1");
      } else {
        $ewrapper->field_link_center_single->set(NULL);
        $ewrapper->field_has_case_center->set("0");
      }
    } else {
      $ewrapper->field_link_center_single->set(NULL);
      $ewrapper->field_has_case_center->set("0");
    }

   // _gsb_box_log('writing field_citation', 'success');
    $ewrapper->field_citation->set(NULL);
 
   // _gsb_box_log('writing field_learning_objective', 'success');
    if (!empty($meta_data['entries'][0]['learningObjective']) && trim($meta_data['entries'][0]['learningObjective']) != '') {
      $learning = $meta_data['entries'][0]['learningObjective'];
      $learning = str_replace('\n','',$learning);
      $ewrapper->field_learning_objective->set($learning);
    } else {
      $ewrapper->field_learning_objective->set(NULL);
    }

    //_gsb_box_log('writing field_page_count', 'success');
    if (!empty($meta_data['entries'][0]['length']) && trim($meta_data['entries'][0]['length']) != '') {
      $ewrapper->field_page_count->set($meta_data['entries'][0]['length']);
    } else {
      $ewrapper->field_page_count->set(NULL);
    }

    //_gsb_box_log('writing field_product_type', 'success');
    $ewrapper->field_product_type->set($product_type);

    //_gsb_box_log('writing field_business_insight_topic', 'success');
    if (!empty($meta_data['entries'][0]['businessTopics1']) && trim($meta_data['entries'][0]['businessTopics1']) != '') {
      $ids = array();
      $bi_topic = $meta_data['entries'][0]['businessTopics1'];
      $results = taxonomy_get_term_by_name($bi_topic);
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'business_insight_topic') {
          $ids[] = $item->tid;
        }
      }
      $ewrapper->field_business_insight_topic->set($ids);
    } else {
      $ewrapper->field_business_insight_topic = array();
    }

    //_gsb_box_log('writing field_academic_area_unlimited', 'success');
    if (!empty($meta_data['entries'][0]['academicArea2']) && trim($meta_data['entries'][0]['academicArea2']) != '') {
      $ids = array();
      $academic_area = $meta_data['entries'][0]['academicArea2'];
      $results = taxonomy_get_term_by_name($academic_area);
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'academic_area') {
          $ids[] = $item->tid;
        }
      }
      $ewrapper->field_academic_area_unlimited->set($ids);
    } else {
      $ewrapper->field_academic_area_unlimited = array();
    }

    //_gsb_box_log('Centers and Research Programs', 'success');
    if (!empty($meta_data['entries'][0]['centersInitiativesInstitutes']) && trim($meta_data['entries'][0]['centersInitiativesInstitutes']) != '') {
      $ids = array();
      $centers = $meta_data['entries'][0]['centersInitiativesInstitutes'];
      $results = taxonomy_get_term_by_name($centers);
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'centers_research_programs') {
          $ids[] = $item->tid;
        }
      }
      $ewrapper->field_centers_research_programs->set($ids);
    } else {
      $ewrapper->field_centers_research_programs = array();
    }


    //_gsb_box_log('writing field_paper_copy', 'success');
     $ewrapper->field_paper_copy->set('No');

    //_gsb_box_log('writing field_item_id', 'success');
    if (!empty($meta_data['entries'][0]['itemId1']) && trim($meta_data['entries'][0]['itemId1']) != '') {
      $ewrapper->field_item_id->set($meta_data['entries'][0]['itemId1']);
    } else {
      $ewrapper->field_item_id->set(NULL);
    }

    //_gsb_box_log('writing field_tag', 'success'); 
    if(!empty($meta_data['entries'][0]['tags']) )
      $tags = explode(",", $meta_data['entries'][0]['tags']);
    else
      $tags = "";
    if (!empty($tags)) {
      $ids = array();
      $term_list = array();
      _gsb_box_add_tags($tags);
      foreach($tags as $term) {
        $results = taxonomy_get_term_by_name($term);
        $term_list = array_merge($term_list, $results);
      }
      foreach ($term_list as $item) {
        if ($item->vocabulary_machine_name == 'tag') {
          $ids[] = $item->tid;
        }
      }
      $ewrapper->field_tag->set($ids);
    } else {
      $ewrapper->field_tag = array();
    }

    //_gsb_box_log('writing sunet field_authors', 'success');
    _gsb_box_import_sunet_authors($node,$ewrapper,$meta_data);

    //_gsb_box_log('writing field_free_case', 'success');
    $ewrapper->field_free_case->set("0");
    if ($case_access == 'Free') {
      $ewrapper->field_free_case->set("1");
    }

    //_gsb_box_log('saving node nid = ' . $node->nid, 'success');
    $ewrapper->save();
    $node = node_load($node->nid);
    // get the new list of authors saved with the node
    $authors = $ewrapper->field_authors->value();
    // update the list to remove any field collections that
    // have been deleted and then save the node
    if (!empty($authors)) {
      unset($node->field_authors[$language]);
      $node->field_authors[$language] = array();
      foreach($authors as $key => $author) {
        if ($author == null) {
          // skipping the deleted item
          continue;
        }
        $node->field_authors[$language][] = array('revision_id' => $author->revision_id, 'value' => $author->item_id);
      }
    }
    $node->status = 1;
    $node->workbench_moderation['updating_live_revision'] = 1;
    node_save($node);
    
    // _gsb_box_log('Case node created/updated successfully with File ID:'.$fileid , 'success');
    echo "<br/>";
    echo "Case node created/updated successfully with File ID: ".$fileid." And Node ID: ".$node->nid;
    _gsb_box_log('Case node created/updated successfully with File ID : '.$fileid .' And Node ID: '.$node->nid, 'success');
    echo "<br/>";
    //_gsb_box_log('Case node uuid : '.$uuid, 'success');
    $enterprise_id = "enterprise_".trim(variable_get('box_enterprise_id'));
    $qry_data = '[{"op":"test","path":"/publish","value":"Yes"},{"op":"remove","path":"/publish"}]';

    $options   = array(
                    'method'  => 'PUT',
                    'data'    =>  $qry_data,
                    'headers' => array('Content-Type' => 'application/json-patch+json',
                    'Authorization' => 'Bearer '.$token),
                    );
    $response_data = drupal_http_request('https://api.box.com/2.0/files/'.$fileid.'/metadata/'.$enterprise_id.'/gsbitops',$options);
    if($response_data->status_message == 'OK' &&  $response_data->code == '200') {
        echo "Case file metadata updated with File ID: ".$fileid;
       _gsb_box_log('Case file metadata updated with File ID: '.$fileid, 'success');
    }
    else {
       echo "Case file metadata failed to update with File ID: ".$fileid;
       _gsb_box_log('Case file metadata failed to update with File ID: '.$fileid, 'success');
    }
  
}

function _gsb_box_fetch_folder_details($access_token,$folder_id) {

    $options = array(
                    'method' => 'GET',
                    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                       'Authorization' => 'Bearer '.$access_token),
                    );
    $response = drupal_http_request('https://api.box.com/2.0/folders/'.$folder_id.'?fields=item_collection,name',$options);
    return drupal_json_decode($response->data);

}
/**
 * Fetch file details
 */
function _gsb_box_fetch_file_details($access_token,$file_id) {

    $options = array(
                    'method' => 'GET',
                    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                    'Authorization' => 'Bearer '.$access_token),
                    );
    $response = drupal_http_request('https://api.box.com/2.0/files/'.$file_id,$options);
    if(isset($response->data) )
    return drupal_json_decode($response->data);
    else
    return array();
}
/**
 * Fetch meta data details of file
 */
function _gsb_box_fetch_file_meta_details($access_token,$file_id) {

    $options = array(
                    'method' => 'GET',
                    'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                    'Authorization' => 'Bearer '.$access_token),
                    );
    $response = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/metadata',$options);
    if(isset($response->data))
    return drupal_json_decode($response->data);
    else
    return array();
}


/**
 *
 */
function _gsb_box_time_mark() {
  $time = microtime();
  $time = explode(' ', $time);
  $time = $time[1] + $time[0];
  return $time;
}

/**
 *
 */
function _gsb_box_time_message($message, $start_time, $end_time) {
  $total_time = round(($end_time - $start_time), 4);
  drush_log(dt($message.$total_time), 'success');
}

/**
 *
 */
function _gsb_box_log($message, $type = 'notice', $error = null) {
  if (function_exists('drush_log')) {
    drush_log(dt($message), $type, $error);
  }
  elseif (function_exists('dpm')) {
    dpm($message);
  }
}

/**
 * Add protocol of http:// if url has no protocol
 */
function _gsb_box_force_protocol($url) {
  if (!stristr($url,'http://') && !stristr($url,'https://')) {
    return 'http://' . $url;
  }
  return $url;
}

/**
 * Add the case tags from the returned Alfresco data
 */
function _gsb_box_add_tags($tags) {
  $vocab = taxonomy_vocabulary_machine_name_load('tag');
  $vid = $vocab->vid;
  foreach($tags as $term) {
    $results = taxonomy_get_term_by_name($term);
    if (empty($results)) {
      _gsb_box_add_tag_term($term, $vid);
    } else {
      $found = FALSE;
      foreach ($results as $item) {
        if ($item->vocabulary_machine_name == 'tag') {
          $found = TRUE;
          break;
        }
      }
      if (!$found) {
        _gsb_box_add_tag_term($term, $vid);
      }
    }
  }
}

/**
 * Add a tag term
 */
function _gsb_box_add_tag_term($term, $vid) {
  $new_term = new stdClass();
  $new_term->name = $term;
  $new_term->description = '';
  $new_term->vid = $vid;
  $new_term->parent = null;
  taxonomy_term_save($new_term);
}

/**
 * Get sunet authors from the Alfresco doc properties
 */
function _gsb_box_import_sunet_authors($node,$ewrapper,$meta_data) {

  // gather a list of entity ids to add and remove
  $add_entity_ids = array();
  $del_field_collection_items = array();

  // get the list of sunetids from Alfresco's returned data
  $sunet_ids = array();
  if (!empty($meta_data['entries'][0]['authorsSunetidCommaSeparatedForMultipleAuthors']) && trim($meta_data['entries'][0]['authorsSunetidCommaSeparatedForMultipleAuthors']) != '') {
    $sunet_ids = array_map('trim', explode(',', $meta_data['entries'][0]['authorsSunetidCommaSeparatedForMultipleAuthors']));
    // lookup the node ids related to these ids
    $query = db_select('field_data_field_sunetid', 'su');
    $query->fields('su', array('bundle', 'entity_id', 'field_sunetid_value'));
    $query->condition('su.field_sunetid_value',$sunet_ids,'IN');
    $result = $query->execute();
    // start by putting all these node ids in the add list
    foreach ($result as $record) {
      $add_entity_ids[$record->entity_id] = $record->entity_id;
    }
  }

  // get the current list of authors saved with the node
  $authors = $ewrapper->field_authors->value();

  // if any of the author ids match one of the sunetid node ids, then
  // we don't need to add it, and can remove it from our add list.
  // also...
  // if an author id isn't in the add list, then it needs to be removed
  // so we'll add it to our delete list.
  foreach($authors as $author) {
    $ewrap_author = entity_metadata_wrapper('field_collection_item', $author);
    $ref = $ewrap_author->field_person_fac_single_ref->value();
    if ($ref) {
      $author_nid = $ref->nid;
      if (!empty($add_entity_ids[$author_nid])) {
        unset($add_entity_ids[$author_nid]);
      } else {
        $del_field_collection_items[] = $author;
      }
    }
  }

  // check for an 'default/empty' author field collection
  // remove if this is the case, and we have authors to add
  $found_default = FALSE;
  if (count($authors) == 1) {
    if (empty($authors[0]->field_first_name)) {
      if (empty($authors[0]->field_last_name)) {
        if (empty($authors[0]->field_person_fac_single_ref)) {
          $found_default = TRUE;
        }
      }
    }
  }
  if ($found_default && count($add_entity_ids) > 0) {
    $ewrapper->field_authors->set(NULL);
  }

  // add any new authors that came for the sunetids
  foreach ($add_entity_ids as $entity_id) {
    _gsb_box_add_author($node, $entity_id);
  }

  // delete any authors that are no longer sunetids in Alfresco
  foreach($del_field_collection_items as $item) {
    $item->delete();
  }

}

/**
 * Add an author entity ref (via field_authors field collection)
 * to the node's current list
 */
function _gsb_box_add_author($node, $entity_id) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_authors'));
  $field_collection_item->setHostEntity('node', $node);

  $field_collection_item->field_person_fac_single_ref = array(
    'und' => array(array('target_id' => $entity_id)),
  );

  $field_collection_item->field_person_fac_or_other = array(
    'und' => array(array('value' => 'UseEntityReference')),
  );

  $field_collection_item->field_first_name = array();
  $field_collection_item->field_last_name = array();

  $field_collection_item->field_profile_visibility = array(
    'und' => array(array('value' => '1')),
  );

  $field_collection_item->save();

}

/**
 * Add an author entity 'other' info (via field_authors field collection)
 * to the first and last name given.
 */
function _gsb_box_add_other_author($node, $first_name, $last_name) {

  $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_authors'));
  $field_collection_item->setHostEntity('node', $node);

  $field_collection_item->field_person_fac_single_ref = array();

  $field_collection_item->field_person_fac_or_other =  array(
    'und' => array(array('value' => 'Other')),
  );

  $field_collection_item->field_first_name = array(
    'und' => array(array('value' => $first_name)),
  );

  $field_collection_item->field_last_name = array(
    'und' => array(array('value' => $last_name)),
  );

  $field_collection_item->field_profile_visibility =  array(
    'und' => array(array('value' => '1')),
  );

  $field_collection_item->save();

}

/**
 * Get the Author properties 
 */
function  _gsb_box_getAuthorProperties($node) {

  $language = $node->language;
  $authorSunetIds = array();
  $authors = array();
  if (empty($node->field_authors[$language][0])) {
    return array($authorSunetIds, $authors);
  }  
  foreach($node->field_authors[$language] as $item) {
    //echo  $item['field_person_fac_single_ref'][$language][0]['target_id'];
   if (!empty($item['field_person_fac_single_ref'][$language][0]['target_id']) ) {
      $authors_nid = $item['field_person_fac_single_ref'][$language][0]['target_id'];
      $author_node = node_load($authors_nid);
      $authorSunetIds[] = $author_node->field_sunetid[$language][0]['value'];  
      $first_name = $author_node->field_first_name['und'][0]['value'];
      $last_name = $author_node->field_last_name['und'][0]['value'];
      $authors[] = $first_name . ' ' . $last_name;      
    } 
    elseif(!empty($item['field_person_fac_or_other'][$language][0]['value']) && $item['field_person_fac_or_other'][$language][0]['value'] == 'Other')
    {
      $first_name = $item['field_first_name'][$language][0]['value'];
      $last_name  = $item['field_last_name'][$language][0]['value'];
      $authors[]  = $first_name . ' ' . $last_name;
    }
  }
  return array($authorSunetIds, $authors);

}


/**
 * GSB Box working paper file upload
 * 
 */

function gsb_box_working_paper_file_upload($node) {

  if(empty($node) )
  return false;

  global $conf;
  $language = $node->language;
  $working_paper_folder = trim(variable_get('box_workingpaper_folder_id'));
  // get the uuid of the Alfresco Document
  $uuid = -1;
  if (!empty($node->field_document_uuid[$language][0])) {
    $uuid = $node->field_document_uuid[$language][0]['value'];
  }

  // get info about the uploaded file
  $file = null;
  if (!empty($node->field_file_single_public[$language])) {
    $fid = $node->field_file_single_public[$language][0]['fid'];
    $file = file_load($fid);   
  } 

  $filename    = '';
  $new_item_id = '';
  if (!empty($node->field_item_id[$language][0])) {
    $filename = 'RP' . (integer)$node->field_item_id[$language][0]['value'];
  } else {
    $new_item_id = (integer)variable_get('gsb_feature_working_paper_ct_item_id');
    $filename = 'RP' . $new_item_id;
    $conf['gsb_feature_working_paper_ct_item_id'] = $new_item_id + 1;
    variable_set('gsb_feature_working_paper_ct_item_id', $conf['gsb_feature_working_paper_ct_item_id']);
  }
  if($file->filemime == 'application/pdf')
  $filename = $filename.".pdf"; 
  else
  $filename = $filename.".pdf"; 
  $file_empty_flag = 1;
  if(empty($file) && $uuid == -1) {
    $file_empty_flag = 0;
    global $user;
    $uri = 'public://box-place-holder.pdf';
    $file = new stdClass;
    $file->uid = $user->uid;
    $file->filename = 'box-place-holder.pdf';
    $file->uri = $uri;
    $file->filemime = 'application/pdf';
    $file->filesize = filesize($uri);
    $file->status = 1;
    $node->field_has_pdf[$language][0]['value'] = '0';
  }
 
  
  $box_object = null;
  // check if we already have a document/uuid on Box
  if ($uuid == -1) {
    // create a document/file on Box
    $box_object = _gsb_box_working_paper_createDocument($file,$working_paper_folder, $filename); 

  } else {
     $box_object = _gsb_box_working_paper_updateDocument($file, $working_paper_folder, $filename, $uuid);
     /* $box_object = _gsb_box_working_paper_createDocument($file,$working_paper_folder, $filename); 
      if (isset($box_object['type']) && $box_object['type'] == 'error') {
       $box_object = _gsb_box_working_paper_updateDocument($file, $working_paper_folder, $filename, $uuid); 
      }*/
  }



  // set the item id, if we created a new one 
  if (!empty($new_item_id)) {
    $node->field_item_id[$language][0]['value'] = $new_item_id;
  } 

  // set the product type
  $node->field_product_type[$language][0]['value'] = 'Working Paper';
  
   // get the properties for the object from Box
   if(isset($box_object['entries'][0]['id']) && !empty($box_object['entries'][0]['id'])) {
      // set the 'has pdf' checkbox
      $node->field_has_pdf[$language][0]['value'] = '1';
      $node->field_document_uuid[$language][0]['value'] = $box_object['entries'][0]['id'];
      _gsb_box_create_update_meta_data($node,$file,$box_object['entries'][0]['id']);
   }
   else {
      _gsb_box_create_update_meta_data($node,$file,$uuid);
   }
   
  if ( (isset($box_object['type']) && $box_object['type'] == 'error') || $box_object == 'Error JWT Token' ) {
    if($box_object != "Error JWT Token")
    drupal_set_message(t('Error: Creating/Updating document on Box - '. $box_object['message']), 'error', FALSE);
    else
    drupal_set_message(t('Error: Creating/Updating document on Box - JWT Token Error!'), 'error', FALSE);
    return false;
  }
   // remove file from the Drupal system
  if (!empty($file) && $file_empty_flag == 1) {
      $node->field_has_pdf[$language][0]['value'] = '1';
      $usage = file_usage_list($file);
      if (!empty($usage)) {
        if (count($usage['file']['node']) == 1 && !empty($usage['file']['node'][$node->nid])) {
          file_delete($file,TRUE);
        }
      } else {
        file_delete($file);
      }
  }
  else if($file_empty_flag == 0 && $uuid == -1) {
    $node->field_has_pdf[$language][0]['value'] = '0';
  }
  
  return true;

}

function _gsb_box_working_paper_createDocument($file, $folder, $filename) {
 
    $token = gsb_box_get_access_token();
    if ($token != "Error JWT Token") {
        $url  = 'https://upload.box.com/api/2.0/files/content';
        $json = json_encode(array(
                    'name' => $filename, 
                    'parent' => array('id' => $folder)
                ));
        $params = array(
          'attributes' => $json,
          'file'=>new CurlFile(drupal_realpath($file->uri),$file->filemime,$file->filename)
        );
        $headers = array("Authorization: Bearer ".$token); 

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $response = curl_exec($ch); 
        curl_close($ch);  
        return drupal_json_decode($response);
     }
     else
     {
        //drupal_set_message('JWT Token Error!');
        return $token;
     }
}

function _gsb_box_working_paper_updateDocument($file, $folder, $filename, $file_id) {
 
    $token = gsb_box_get_access_token();
    if ($token != "Error JWT Token") {
        //$file_id = '209206146363';
        $url  = 'https://upload.box.com/api/2.0/files/'.$file_id.'/content';
        $json = json_encode(array(
                    'name' => $filename, 
                    'parent' => array('id' => $folder)
                ));
        $params = array(
         // 'attributes' => $json,
          'file'=>new CurlFile(drupal_realpath($file->uri),$file->filemime,$file->filename)
        );
        $headers = array("Authorization: Bearer ".$token); 
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $response = curl_exec($ch); 
        curl_close($ch);  
        return drupal_json_decode($response);
            
     }
     else
     {
        //drupal_set_message('JWT Token Error!');
        return $token;
     }
}

function _gsb_box_create_update_meta_data($node,$file,$file_id) {
 
  $token = gsb_box_get_access_token();
  if ($token != "Error JWT Token") {

     $language = $node->language;
     $authorSunetIds = array();
     $authors = array();
     if (!empty($node->field_authors[$language][0])) {
       list($authorSunetIds, $authors) = _gsb_box_getAuthorProperties($node);
     } 
    $cwoAcademicArea = '';
    if (!empty($node->field_academic_area_unlimited[$language][0])) {
      $academic_area_tid = $node->field_academic_area_unlimited[$language][0]['tid'];
      $academic_area_term = taxonomy_term_load($academic_area_tid); 
      $cwoAcademicArea = $academic_area_term->name;
    }

    $cwoBusinessTopics = '';
    if (!empty($node->field_business_insight_topic[$language][0])) {
      $bi_topic_tid = $node->field_business_insight_topic[$language][0]['tid'];
      $bi_topic_term = taxonomy_term_load($bi_topic_tid);
      $cwoBusinessTopics = $bi_topic_term->name;
    }
    $centersInitiativesInstitutes = '';
    if (!empty($node->field_centers_research_programs[$language][0])) {
      $ci_topic_tid = $node->field_centers_research_programs[$language][0]['tid'];
      $ci_topic_term = taxonomy_term_load($ci_topic_tid);
      $centersInitiativesInstitutes = $ci_topic_term->name;
    }

    $json = array(
                  'title' => $node->title, 
                  'itemId1' => (string)$node->field_item_id[$language][0]['value']
                 ); 
    if(!empty($node->field_year_of_publication[$language][0]['value']))
    $json['publicationYear'] = substr($node->field_year_of_publication[$language][0]['value'],0,4);
    if(!empty($file->filemime) )
    $json['mimetype'] = $file->filemime;
    if(!empty($node->field_product_type[$language][0]['value']))
    $json['productType'] = $node->field_product_type[$language][0]['value'];
    if(!empty($authors))
    $json['author'] = implode(', ', $authors);
    if(!empty($authorSunetIds))
    $json['authorsSunetidCommaSeparatedForMultipleAuthors'] = implode(', ', $authorSunetIds);
    if(!empty($node->field_description[$language][0]['value'] ))
    $json['abstract'] = strip_tags($node->field_description[$language][0]['value']); 
    if($cwoAcademicArea != "")
    $json['academicArea2'] = $cwoAcademicArea;
    if($cwoBusinessTopics != "")
    $json['businessTopics1'] = $cwoBusinessTopics;
    if($centersInitiativesInstitutes != "")
    $json['centersInitiativesInstitutes'] = $centersInitiativesInstitutes;
   
    $json_encode = json_encode($json);
    $options2 = array(
                    'method' => 'POST',
                    'data'    => $json_encode,
                    'headers' => array('Content-Type' => 'application/json',
                    'Authorization' => 'Bearer '.$token),
                    );
    $response_data = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/metadata/enterprise_86433/gsbitops',$options2);
    watchdog('Metdata condn 1 - Request:', $response_data->request);
    watchdog('Metdata condn 1 - Data:', $response_data->data);
    watchdog('Metdata condn 1 - Message:', $response_data->status_message);

    if($response_data->status_message == 'Conflict' &&  $response_data->code == '409') {

       $meta_data = _gsb_box_fetch_file_meta_details($token,$file_id);       
       $qry_data = '[{"op":"add","path":"/title","value":"'.$node->title.'"}';
       if($node->field_year_of_publication[$language][0]['value'] != "")
       $qry_data .=  ',{"op":"add","path":"/publicationYear","value":"'.substr($node->field_year_of_publication[$language][0]['value'],0,4).'"}';
       if(!empty($authors))
       $qry_data .=   ',{"op":"add","path":"/author","value":"'.implode(', ', $authors).'"}';
       if(!empty($authorSunetIds))
       $qry_data .=   ',{"op":"add","path":"/authorsSunetidCommaSeparatedForMultipleAuthors","value":"'.implode(', ', $authorSunetIds).'"}';
       else
       $qry_data .=   ',{"op":"add","path":"/authorsSunetidCommaSeparatedForMultipleAuthors","value":""}';

       if($cwoAcademicArea != "")
       $qry_data .=   ',{"op":"add","path":"/academicArea2","value":"'.$cwoAcademicArea.'"}';
       else if ( isset($meta_data['entries'][0]['academicArea2']) && !empty($meta_data['entries'][0]['academicArea2']) ){
          $qry_data .=   ',{"op":"remove","path":"/academicArea2"}';
       }

       if($cwoBusinessTopics != "")
       $qry_data .=   ',{"op":"add","path":"/businessTopics1","value":"'.$cwoBusinessTopics.'"}';
       else if (isset($meta_data['entries'][0]['businessTopics1']) && !empty($meta_data['entries'][0]['businessTopics1'])) {
       $qry_data .=   ',{"op":"remove","path":"/businessTopics1"}';
       }

       if($centersInitiativesInstitutes != "")
       $qry_data .=   ',{"op":"add","path":"/centersInitiativesInstitutes","value":"'.$centersInitiativesInstitutes.'"}';
       else if ( isset($meta_data['entries'][0]['centersInitiativesInstitutes']) && !empty($meta_data['entries'][0]['centersInitiativesInstitutes']) ){
       $qry_data .=   ',{"op":"remove","path":"/centersInitiativesInstitutes"}';
       }

       if(!empty($node->field_description[$language][0]['value'])){
          $abstract = str_replace("\r\n",'', $node->field_description[$language][0]['value']);
          $abstract = str_replace("\n",'', $abstract);
          $abstract = str_replace("\r",'', $abstract);
          $abstract = str_replace("&nbsp;",' ', $abstract);
          $qry_data .=   ',{"op":"add","path":"/abstract","value":"'.strip_tags(trim($abstract)).'"}';
       }
       $qry_data .= ']';
       $options3 = array(
                      'method'  => 'PUT',
                      'data'    =>  $qry_data,
                      'headers' => array('Content-Type' => 'application/json-patch+json',
                      'Authorization' => 'Bearer '.$token),
                      );
       $response_data1 = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/metadata/enterprise_86433/gsbitops',$options3);
       watchdog('Metdata condn 2 - Request:', $response_data1->request);
       watchdog('Metdata condn 2 - Data:', $response_data1->data);
       watchdog('Metdata condn 2 - Message:', $response_data1->status_message);
      
    }
    return true;
  }
   
}

function gsb_box_case_alresco_node_update( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-10-17-case-mapping1.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    if ( $handle = fopen($file_path, 'r') ) {
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
           {
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'case');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_document_name_value', $line[0]);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   //$matching_node_ids[] = $data[0]->nid;
                   $node    = node_load($data[0]->nid);
                   $wrapper = entity_metadata_wrapper('node', $node);
                   $wrapper->field_instance_text->set(trim($line[2]) );
                   $wrapper->save();
                   $result_array[]  = array('nid' => $data[0]->nid,
                               'file_name' => $line[0],
                               'file_id'=> $line[2]);

              }
           }
        }  
        fclose($handle);

        echo "<pre>";
        print_r($result_array);
        echo "</pre>";
      /*$query2 = db_select('node', 'n');
        $query2->fields('n', array('nid','title'));
        $query2->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
        $query2->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
        $query2->fields('fdfdu', array('entity_id', 'field_document_uuid_value'));
        $query2->fields('fdfdn', array('entity_id', 'field_document_name_value'));
        $query2->condition('n.type', 'case');
        $results2 = $query2->execute();
        $data2    = $results2->fetchAll();
        $unmatching_node_ids = $unmatching_node_ids1 =array();
        foreach($data2 as $row) {
            $unmatching_node_ids[]  =  $row->nid;
            $unmatching_node_ids1[$row->nid] = array($row->title,$row->field_document_name_value);
        }
        $differents_array = array_diff($unmatching_node_ids, $matching_node_ids);
        foreach($differents_array as $row1){
           $title = $unmatching_node_ids1[$row1][0];
           $file_name = $unmatching_node_ids1[$row1][1];
           $result_array[]  = array('nid' => $row1,
                               'title' => $title,
                               'file_name'=> $file_name);
        }*/
       
         /*header('Content-type: text/csv');
         header('Content-Disposition: attachment; filename="case-node-result.csv"');
         header('Pragma: no-cache');
         header('Expires: 0');
         $file = fopen('php://output', 'w');
         foreach ($result_array as $row)
         {
           fputcsv($file, $row);
         }*/
           
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}


function gsb_box_case_node_update_one( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-10-17-case-mapping2.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    if ( $handle = fopen($file_path, 'r') ) {
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
           {
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'case');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_document_name_value', $line[0]);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   //$matching_node_ids[] = $data[0]->nid;
                   $node    = node_load($data[0]->nid);
                   $wrapper = entity_metadata_wrapper('node', $node);
                   $wrapper->field_instance_text->set(trim($line[2]) );
                   $wrapper->save();
                   $result_array[]  = array('nid' => $data[0]->nid,
                               'file_name' => $line[0],
                               'file_id'=> $line[2]);

              }
           }
        }  
        fclose($handle);

        echo "<pre>";
        print_r($result_array);
        echo "</pre>";
           
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_case_node_update_three( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-10-17-case-mapping3.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    if ( $handle = fopen($file_path, 'r') ) {
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
           {
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'case');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_document_name_value', $line[0]);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   //$matching_node_ids[] = $data[0]->nid;
                   $node    = node_load($data[0]->nid);
                   $wrapper = entity_metadata_wrapper('node', $node);
                   $wrapper->field_instance_text->set(trim($line[2]) );
                   $wrapper->save();
                   $result_array[]  = array('nid' => $data[0]->nid,
                               'file_name' => $line[0],
                               'file_id'=> $line[2]);

              }
           }
        }  
        fclose($handle);

        echo "<pre>";
        print_r($result_array);
        echo "</pre>";
           
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_case_node_update_two( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-10-17-case-mapping.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $count = 1;
    $matching_node_ids = $matching_node_ids1 = array();
    if ( $handle = fopen($file_path, 'r') ) {
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
           {
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'case');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_document_name_value', $line[0]);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
               
                   $msg = "";
                   $num_updated = db_update('field_data_field_instance_text')
                                           ->fields(array('field_instance_text_value' => $line[2]))
                                           ->condition('entity_id', $data[0]->nid,'=')
                                           ->execute();
                    if($num_updated)
                    $msg = " Success";
                    else
                    $msg = " Fail";  
          
                    $matching_node_ids[] = "  File Name-  ".$line[0]."  UUID - ".$line[1]."  - File ID - ".$line[2]." Node ID- ".$data[0]->nid. " Msg - ".$msg;
                   
              }
              else {
                 $matching_node_ids1[] = "  File Name-  ".$line[0]."  UUID - ".$line[1]."  - File ID - ".$line[2]. " Msg- No Match";
                  
              }
              $count++;
           }
        }  
        fclose($handle);
        echo "<pre>";
        echo "Matching Records ==== ";
        print_r($matching_node_ids);
        echo "Un Matching Records ==== ";
        print_r($matching_node_ids1);
        echo "</pre>";
                  
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_case_working_paper_node_update( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-10-27-working-paper.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    $count = 1;
    if ( $handle = fopen($file_path, 'r') ) {
      while ( $line = fgetcsv($handle, 4096) ) {
          if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
          {
              $item_data = array();
              $item_data = (explode(".",$line[0]));
              $item_id   = substr($item_data[0], 2);
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_item_id', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'working_paper');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_item_id_value', $item_id);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   //$matching_node_ids[] = $data[0]->nid;
                    $msg = "";
                   $num_updated = db_update('field_data_field_document_uuid')
                                           ->fields(array('field_document_uuid_value' => $line[2]))
                                           ->condition('entity_id', $data[0]->nid,'=')
                                           ->execute();
                    if($num_updated)
                    $msg = " Success";
                    else
                    $msg = " Fail";  
                    $matching_node_ids[] = "  Name -  ".$line[0]."   UUID - ".$line[1]."  - File ID - ".$line[2]." -- Node ID- ".$data[0]->nid." Msg -".$msg;
              }
              else {
                $matching_node_ids1[] = " Name -  ".$line[0]."  -- UUID - ".$line[1]."  - File ID - ".$line[2]." Msg - Not Matching";
         
              }
              $count++;
           }
      }  
      fclose($handle);
      echo "<pre>";
      echo "Matching Records ==== ";
      print_r($matching_node_ids);
      echo "Un Matching Records ==== ";
      print_r($matching_node_ids1);
      echo "</pre>";
       
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_case_node_update_box_id()
{
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/Box-file-ids-update-for-Case-Node.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    $count = 1;
    if ( $handle = fopen($file_path, 'r') ) {
        //$line = fgetcsv($handle, 4096);
        $count = 1;
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[3]))
           {
               echo  $count." == ". $line[0]." --- ".$line[2]." ---- ".$line[3];
               echo "<br/>";
               $node    = node_load($line[0]);
               $wrapper = entity_metadata_wrapper('node', $node);
               $wrapper->field_instance_text->set(trim($line[3]) );
               $wrapper->save();
               $count++;  
           }
        }  
        fclose($handle);
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_case_node_no_box_file_ids( )
{
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/Case-Node-With-Box-file-ids-consolidated-list.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $matching_node_ids = array();
    if ( $handle = fopen($file_path, 'r') ) {
        //$line = fgetcsv($handle, 4096);
        $count = 1;
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[2]))
           {
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              //$query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              //$query->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->join('field_data_field_instance_text', 'fdfit', "n.nid = fdfit.entity_id");
              $query->condition('n.type', 'case');
              $query->condition('fdfit.field_instance_text_value', trim($line[2]));
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   $matching_node_ids[] = $data[0]->nid;
             
              }
            
           }
        }  
      
        fclose($handle);
        $query2 = db_select('node', 'n');
        $query2->fields('n', array('nid','title'));
        $query2->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
        $query2->join('field_data_field_document_name', 'fdfdn', "n.nid = fdfdn.entity_id");
        $query2->fields('fdfdu', array('entity_id', 'field_document_uuid_value'));
        $query2->fields('fdfdn', array('entity_id', 'field_document_name_value'));
        $query2->condition('n.type', 'case');
        $results2 = $query2->execute();
        $data2    = $results2->fetchAll();
        $unmatching_node_ids = $unmatching_node_ids1 =array();
        foreach($data2 as $row) {
            $unmatching_node_ids[]  =  $row->nid;
            $unmatching_node_ids1[$row->nid] = array($row->title,$row->field_document_name_value);
        }
        $differents_array = array_diff($unmatching_node_ids, $matching_node_ids);
         foreach($differents_array as $row1){
           $title = $unmatching_node_ids1[$row1][0];
           $file_name = $unmatching_node_ids1[$row1][1];
           $result_array[]  = array('nid' => $row1,
                               'title' => $title,
                               'file_name'=> $file_name);
        }
         header('Content-type: text/csv');
         header('Content-Disposition: attachment; filename="Case-Nodes-to-update-box-FileId.csv"');
         header('Pragma: no-cache');
         header('Expires: 0');
         $file = fopen('php://output', 'w');
         foreach ($result_array as $row)
         {
           fputcsv($file, $row);
         }
         exit();    
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_working_paper_node_update_final( ) {
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/2017-12-05-working-paper.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $content = array();
    $matching_node_ids = $matching_node_ids1 = array();
    $count = 1;
    if ( $handle = fopen($file_path, 'r') ) {
        //$line = fgetcsv($handle, 4096);
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]) && !empty($line[1]) && !empty($line[2]))
           {
              $item_data = array();
              $item_data = (explode(".",$line[0]));
              $item_id   = substr($item_data[0], 2);
              $line[1] = str_replace('workspace://SpacesStore/', 'urn:uuid:', $line[1]);
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_item_id', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'working_paper');
              $query->condition('fdfdu.field_document_uuid_value', $line[1]);
              $query->condition('fdfdn.field_item_id_value', $item_id);
              $results = $query->execute();
              $data    = $results->fetchAll();

              if(isset($data[0]) && !empty($data[0]))
              {
                   echo "Document Name-  ".$line[0]."   Document uuid- ".$line[1]."  - File ID- ".$line[2]." Node ID- ".$data[0]->nid;
                   $num_updated = db_update('field_data_field_document_uuid')
                                           ->fields(array('field_document_uuid_value' => $line[2]))
                                           ->condition('entity_id', $data[0]->nid,'=')
                                           ->execute();
                    if($num_updated)
                    echo " Success";
                    else
                    echo " Fail";  
                    echo "<br/>";
         
              }
               
           }
        }  
    
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_wp_node_no_box_file_ids( )
{
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/working-paper-consolidated.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $matching_node_ids = array();
    if ( $handle = fopen($file_path, 'r') ) {
        //$line = fgetcsv($handle, 4096);
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[2]))
           {
              $query = db_select('node', 'n');
              $query->fields('n', array('nid','title'));
              $query->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
              $query->join('field_data_field_item_id', 'fdfdn', "n.nid = fdfdn.entity_id");
              $query->condition('n.type', 'working_paper');
              $query->condition('fdfdu.field_document_uuid_value', $line[2]);
              $results = $query->execute();
              $data    = $results->fetchAll();
              if(isset($data[0]) && !empty($data[0]))
              {
                   $matching_node_ids[] = $data[0]->nid;
             
              }
            
           }
        }  
      
        fclose($handle);
        $query2 = db_select('node', 'n');
        $query2->fields('n', array('nid','title'));
        $query2->join('field_data_field_document_uuid', 'fdfdu', "n.nid = fdfdu.entity_id");
        $query2->join('field_data_field_item_id', 'fdfdn', "n.nid = fdfdn.entity_id");
        $query2->fields('fdfdu', array('entity_id', 'field_document_uuid_value'));
        $query2->fields('fdfdn', array('entity_id', 'field_item_id_value'));
        $query2->condition('n.type', 'working_paper');
        $results2 = $query2->execute();
        $data2    = $results2->fetchAll();
        $unmatching_node_ids = $unmatching_node_ids1 =array();
        foreach($data2 as $row) {
            $unmatching_node_ids[]  =  $row->nid;
            $unmatching_node_ids1[$row->nid] = array($row->title,$row->field_document_name_value);
        }
        $differents_array = array_diff($unmatching_node_ids, $matching_node_ids);
         foreach($differents_array as $row1){
           $title = $unmatching_node_ids1[$row1][0];
           $file_name = $unmatching_node_ids1[$row1][1];
           $result_array[]  = array('nid' => $row1,
                               'title' => $title,
                               'file_name'=> $file_name);
        }
         header('Content-type: text/csv');
         header('Content-Disposition: attachment; filename="WP-Nodes-to-update-box-FileId.csv"');
         header('Pragma: no-cache');
         header('Expires: 0');
         $file = fopen('php://output', 'w');
         foreach ($result_array as $row)
         {
           fputcsv($file, $row);
         }
         exit();    
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

//fetching working paper files with date range for to update old version
function gsb_box_fetch_working_paper_files($params = array()) {
 
  $token = gsb_box_get_access_token();
  if ($token != "Error JWT Token") {
       $options = array(
                        'method' => 'GET',
                        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                        'Authorization' => 'Bearer '.$token),
                        );
       $box_wp_folder_id = '40983428685';
       $qry_data = array(
              'mdfilters'=> '[{"templateKey":"gsbitops","scope":"enterprise_86433","filters":{"productType": "Working Paper"}}]',
              'type'=>'file',
              //'file_extensions'  => 'pdf',
              //'owner_user_ids'=>'1721088119',
              //'content_types'=> 'name,file_content,entries',
              'fields' => 'name,created_at,modified_at,entries,modified_by',
              'ancestor_folder_ids'=> $box_wp_folder_id,
              'updated_at_range' => '2017-12-07T00:00:00-07:00,2017-12-15T23:59:59-07:00',
               );
        $qry_data['offset'] = 0;
        $qry_data['limit']  = 200;
        $qry = http_build_query($qry_data, '', '&');
        $response = drupal_http_request('https://api.box.com/2.0/search?'.$qry,$options);
        $folder_data = drupal_json_decode($response->data);
        //print_r($folder_data);
        if($folder_data['total_count'] > 200) {
          $limit = 200;
          $loop_count = ceil($folder_data['total_count']/200);
          for($i=1; $i<$loop_count; $i++) {
              $offset =   $limit * $i;
              $folder_data_return = _gsb_box_get_wp_folder_data($token, $limit, $offset);
              $folder_data['entries'] = array_merge($folder_data['entries'] , $folder_data_return['entries']);
              $folder_data['limit'] = 200;
              $folder_data['offset'] = $offset;
          }
       
        }
       
        $modified_records = array();
        if(isset( $folder_data['entries'])) {
            $count = 1;
             header('Content-type: text/csv');
             header('Content-Disposition: attachment; filename="WP-Nodes-to-update-version.csv"');
             header('Pragma: no-cache');
             header('Expires: 0');
             $file = fopen('php://output', 'w');
            foreach($folder_data['entries'] as $row) {
              //if($row['type'] == 'file' && $row['modified_by']['id'] =='280540717' && $row['modified_by']['name'] =='vijayanv') {
              if($row['type'] == 'file') {
                
                  $row = array('id'=> $row['id'],
                                'name'=>$row['name']);
                  $modified_records[] =  $row;
                  fputcsv($file, $row);
                  //print_r($modified_records);
                 // exit;
               }
          }
       } 
            
   }
   else
   {
      drupal_set_message('JWT Token has not generated!');
   }
  
}

/**
 * Function for fetching Box research folder data
 */
function _gsb_box_get_wp_folder_data($token, $limit, $offset) {

    $options = array(
                        'method' => 'GET',
                        'headers' => array('Content-Type' => 'application/x-www-form-urlencoded',
                        'Authorization' => 'Bearer '.$token),
                        );
     $box_wp_folder_id = '40983428685';
     $qry_data = array(
              'mdfilters'=> '[{"templateKey":"gsbitops","scope":"enterprise_86433","filters":{"productType": "Working Paper"}}]',
              'type'=>'file',
             // 'file_extensions'  => 'pdf',
             // 'owner_user_ids'=>'1721088119',
              //'content_types'=> 'name,file_content,entries',
              'fields' => 'name,created_at,modified_at,entries,modified_by',
              'ancestor_folder_ids'=> $box_wp_folder_id,
              'updated_at_range' => '2017-12-14T00:00:00-07:00,2017-12-15T23:59:59-07:00',
               );
    $qry_data['offset'] = $offset;
    $qry_data['limit']  = $limit;
    $qry = http_build_query($qry_data, '', '&');
    $response = drupal_http_request('https://api.box.com/2.0/search?'.$qry,$options);
    $folder_data = drupal_json_decode($response->data);
    return $folder_data;

}

function gsb_box_wp_node_fetch_file_versions( )
{
    $token = gsb_box_get_access_token();
    $module_path = drupal_get_path('module', 'gsb_box');
    $csv_file    = "csv/wp-nodes-to-update-version10.csv"; 
    $file_path   = $module_path."/".$csv_file;
    $matching_node_ids = array();
    if ( $handle = fopen($file_path, 'r') ) {
        while ( $line = fgetcsv($handle, 4096) ) {
           if(!empty($line[0]))
           {
                  $file_version = array();
                  $file_version = _gsb_box_get_wp_file_version($token,$line[0]);
                  if($file_version['total_count'] == 1)
                  {
                       $response = "";
                      $res = _gsb_box_get_wp_update_version($token, $line[0], $file_version['entries'][0]['id']);
                      if( $res != "Not updated")
                      $response = $res->status_message;
                      else
                      $response = $res;
                      $modified_records[]  = array('id'=> $line[0],
                                            'name'=>$line[1],
                                            'type'=>$file_version['entries'][0]['type'],
                                            'file_version_id'=>$file_version['entries'][0]['id'],
                                            'result'=>$response
                                          );
                                
                  }
                  else {
                       $row = array('id'=> $line[0],
                                     'name'=>$line[1],
                                     'total_count'=>$file_version['total_count']);
                      $modified_records1[] =  $row;
                  }
            }
        }
            echo "<pre>";
            echo "version one records count ". count($modified_records);
            echo "<br/>";
            print_r($modified_records);
            echo "<br/>";
            echo "other version records count ". count($modified_records1);
            echo "<br/>";
            print_r($modified_records1);
            echo "</pre>";
    }
    else {
      echo 'Unable to read uploaded file !filepath '.$file_path ;
    }
}

function gsb_box_wp_revert_box_file_versions( )
{
    $token = gsb_box_get_access_token();
    $file_id = "";
    $file_version = _gsb_box_get_wp_file_version($token, $file_id);
    if($file_version['total_count'] == 1)
    {
        $res = _gsb_box_get_wp_update_version($token, $file_id, $file_version['entries'][0]['id']);
        if( $res != "Not updated")
        $response = $res->status_message;
        else
        $response = $res;
    }
    else {
      echo "Version count of this file is - ".$file_version['total_count']. " . so its not updated!";
    }
    //echo "</pre>";
}

/**
 * Function for fetching Box research folder data
 */
function _gsb_box_get_wp_file_version($token, $file_id) {

    $options = array(
                        'method' => 'GET',
                        'headers' => array('Content-Type' => 'application/json',
                        'Authorization' => 'Bearer '.$token),
                        );
    $qry = 'fields=total_count,type,id,name,modified_at';
    $response = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/versions?'.$qry,$options);
    return drupal_json_decode($response->data);
}

/**
 * Function for fetching Box research folder data
 */
function _gsb_box_get_wp_update_version($token, $file_id,$file_version) {

  if($file_version != "" &&  $file_id != "")
  {
    $json['type'] = "file_version";
    $json['id']   = $file_version;
    $json_encode  = json_encode($json);
    $options      = array(
                    'method' => 'POST',
                    'data'    => $json_encode,
                    'headers' => array('Content-Type' => 'application/json',
                    'Authorization' => 'Bearer '.$token),
                    );
    $response     = drupal_http_request('https://api.box.com/2.0/files/'.$file_id.'/versions/current',$options);
  }
  else {
    $response     = "Not updated";
  }
  return $response;

}
